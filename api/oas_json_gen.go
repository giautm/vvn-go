// Code generated by ogen, DO NOT EDIT.

package api

import (
	"math/bits"
	"strconv"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"

	"github.com/ogen-go/ogen/validate"
)

// Encode implements json.Marshaler.
func (s FaceAntiSpoofStatus) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s FaceAntiSpoofStatus) encodeFields(e *jx.Encoder) {
	{
		if s.FakeCode.Set {
			e.FieldStart("fake_code")
			s.FakeCode.Encode(e)
		}
	}
	{
		if s.FakeScore.Set {
			e.FieldStart("fake_score")
			s.FakeScore.Encode(e)
		}
	}
	{
		if s.FakeType.Set {
			e.FieldStart("fake_type")
			s.FakeType.Encode(e)
		}
	}
	{
		if s.LivenessCompareScores.Set {
			e.FieldStart("liveness_compare_scores")
			s.LivenessCompareScores.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
}

var jsonFieldsNameOfFaceAntiSpoofStatus = [5]string{
	0: "fake_code",
	1: "fake_score",
	2: "fake_type",
	3: "liveness_compare_scores",
	4: "status",
}

// Decode decodes FaceAntiSpoofStatus from json.
func (s *FaceAntiSpoofStatus) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode FaceAntiSpoofStatus to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "fake_code":
			if err := func() error {
				s.FakeCode.Reset()
				if err := s.FakeCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"fake_code\"")
			}
		case "fake_score":
			if err := func() error {
				s.FakeScore.Reset()
				if err := s.FakeScore.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"fake_score\"")
			}
		case "fake_type":
			if err := func() error {
				s.FakeType.Reset()
				if err := s.FakeType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"fake_type\"")
			}
		case "liveness_compare_scores":
			if err := func() error {
				s.LivenessCompareScores.Reset()
				if err := s.LivenessCompareScores.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"liveness_compare_scores\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode FaceAntiSpoofStatus")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s FaceAntiSpoofStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *FaceAntiSpoofStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes FaceAntiSpoofStatusFakeCode as json.
func (s FaceAntiSpoofStatusFakeCode) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes FaceAntiSpoofStatusFakeCode from json.
func (s *FaceAntiSpoofStatusFakeCode) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode FaceAntiSpoofStatusFakeCode to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch FaceAntiSpoofStatusFakeCode(v) {
	case FaceAntiSpoofStatusFakeCodeFAKE:
		*s = FaceAntiSpoofStatusFakeCodeFAKE
	case FaceAntiSpoofStatusFakeCodeREAL:
		*s = FaceAntiSpoofStatusFakeCodeREAL
	default:
		*s = FaceAntiSpoofStatusFakeCode(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s FaceAntiSpoofStatusFakeCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *FaceAntiSpoofStatusFakeCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes FaceAntiSpoofStatusFakeType as json.
func (s FaceAntiSpoofStatusFakeType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes FaceAntiSpoofStatusFakeType from json.
func (s *FaceAntiSpoofStatusFakeType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode FaceAntiSpoofStatusFakeType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch FaceAntiSpoofStatusFakeType(v) {
	case FaceAntiSpoofStatusFakeTypeNSlashA:
		*s = FaceAntiSpoofStatusFakeTypeNSlashA
	case FaceAntiSpoofStatusFakeTypeSCREEN:
		*s = FaceAntiSpoofStatusFakeTypeSCREEN
	case FaceAntiSpoofStatusFakeTypeRANDOMPOSE:
		*s = FaceAntiSpoofStatusFakeTypeRANDOMPOSE
	case FaceAntiSpoofStatusFakeTypeSTRAIGHTPOSE:
		*s = FaceAntiSpoofStatusFakeTypeSTRAIGHTPOSE
	default:
		*s = FaceAntiSpoofStatusFakeType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s FaceAntiSpoofStatusFakeType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *FaceAntiSpoofStatusFakeType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes FaceAntiSpoofStatusStatus as json.
func (s FaceAntiSpoofStatusStatus) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes FaceAntiSpoofStatusStatus from json.
func (s *FaceAntiSpoofStatusStatus) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode FaceAntiSpoofStatusStatus to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch FaceAntiSpoofStatusStatus(v) {
	case FaceAntiSpoofStatusStatusFAKE:
		*s = FaceAntiSpoofStatusStatusFAKE
	case FaceAntiSpoofStatusStatusREAL:
		*s = FaceAntiSpoofStatusStatusREAL
	default:
		*s = FaceAntiSpoofStatusStatus(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s FaceAntiSpoofStatusStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *FaceAntiSpoofStatusStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s GatewayError) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s GatewayError) encodeFields(e *jx.Encoder) {
	{

		e.FieldStart("message")
		e.Str(s.Message)
	}
}

var jsonFieldsNameOfGatewayError = [1]string{
	0: "message",
}

// Decode decodes GatewayError from json.
func (s *GatewayError) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayError to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "message":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.Message = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"message\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayError")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfGatewayError) {
					name = jsonFieldsNameOfGatewayError[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s GatewayError) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayError) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s OCRResult) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s OCRResult) encodeFields(e *jx.Encoder) {
	{
		if s.Address.Set {
			e.FieldStart("address")
			s.Address.Encode(e)
		}
	}
	{
		if s.Addressconf.Set {
			e.FieldStart("addressconf")
			s.Addressconf.Encode(e)
		}
	}
	{
		if s.Birthday.Set {
			e.FieldStart("birthday")
			s.Birthday.Encode(e)
		}
	}
	{
		if s.Birthdayconf.Set {
			e.FieldStart("birthdayconf")
			s.Birthdayconf.Encode(e)
		}
	}
	{
		if s.Class.Set {
			e.FieldStart("class")
			s.Class.Encode(e)
		}
	}
	{
		if s.Country.Set {
			e.FieldStart("country")
			s.Country.Encode(e)
		}
	}
	{
		if s.District.Set {
			e.FieldStart("district")
			s.District.Encode(e)
		}
	}
	{
		if s.Document.Set {
			e.FieldStart("document")
			s.Document.Encode(e)
		}
	}
	{
		if s.Ethnicity.Set {
			e.FieldStart("ethnicity")
			s.Ethnicity.Encode(e)
		}
	}
	{
		if s.Expiry.Set {
			e.FieldStart("expiry")
			s.Expiry.Encode(e)
		}
	}
	{
		if s.Expiryconf.Set {
			e.FieldStart("expiryconf")
			s.Expiryconf.Encode(e)
		}
	}
	{
		if s.Hometown.Set {
			e.FieldStart("hometown")
			s.Hometown.Encode(e)
		}
	}
	{
		if s.Hometownconf.Set {
			e.FieldStart("hometownconf")
			s.Hometownconf.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.IDCheck.Set {
			e.FieldStart("id_check")
			s.IDCheck.Encode(e)
		}
	}
	{
		if s.IDFull.Set {
			e.FieldStart("id_full")
			s.IDFull.Encode(e)
		}
	}
	{
		if s.IDLogic.Set {
			e.FieldStart("id_logic")
			s.IDLogic.Encode(e)
		}
	}
	{
		if s.IDLogicMessage.Set {
			e.FieldStart("id_logic_message")
			s.IDLogicMessage.Encode(e)
		}
	}
	{
		if s.IDType.Set {
			e.FieldStart("id_type")
			s.IDType.Encode(e)
		}
	}
	{
		if s.Idconf.Set {
			e.FieldStart("idconf")
			s.Idconf.Encode(e)
		}
	}
	{
		if s.IssueBy.Set {
			e.FieldStart("issue_by")
			s.IssueBy.Encode(e)
		}
	}
	{
		if s.IssueByConf.Set {
			e.FieldStart("issue_by_conf")
			s.IssueByConf.Encode(e)
		}
	}
	{
		if s.IssueDate.Set {
			e.FieldStart("issue_date")
			s.IssueDate.Encode(e)
		}
	}
	{
		if s.IssueDateConf.Set {
			e.FieldStart("issue_date_conf")
			s.IssueDateConf.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Nameconf.Set {
			e.FieldStart("nameconf")
			s.Nameconf.Encode(e)
		}
	}
	{
		if s.National.Set {
			e.FieldStart("national")
			s.National.Encode(e)
		}
	}
	{
		if s.OptinalData.Set {
			e.FieldStart("optinal_data")
			s.OptinalData.Encode(e)
		}
	}
	{
		if s.PassportType.Set {
			e.FieldStart("passport_type")
			s.PassportType.Encode(e)
		}
	}
	{
		if s.Precinct.Set {
			e.FieldStart("precinct")
			s.Precinct.Encode(e)
		}
	}
	{
		if s.Province.Set {
			e.FieldStart("province")
			s.Province.Encode(e)
		}
	}
	{
		if s.Religion.Set {
			e.FieldStart("religion")
			s.Religion.Encode(e)
		}
	}
	{
		if s.Religionconf.Set {
			e.FieldStart("religionconf")
			s.Religionconf.Encode(e)
		}
	}
	{
		if s.ResultCode.Set {
			e.FieldStart("result_code")
			s.ResultCode.Encode(e)
		}
	}
	{
		if s.ServerName.Set {
			e.FieldStart("server_name")
			s.ServerName.Encode(e)
		}
	}
	{
		if s.ServerVer.Set {
			e.FieldStart("server_ver")
			s.ServerVer.Encode(e)
		}
	}
	{
		if s.Sex.Set {
			e.FieldStart("sex")
			s.Sex.Encode(e)
		}
	}
	{
		if s.Sexconf.Set {
			e.FieldStart("sexconf")
			s.Sexconf.Encode(e)
		}
	}
}

var jsonFieldsNameOfOCRResult = [38]string{
	0:  "address",
	1:  "addressconf",
	2:  "birthday",
	3:  "birthdayconf",
	4:  "class",
	5:  "country",
	6:  "district",
	7:  "document",
	8:  "ethnicity",
	9:  "expiry",
	10: "expiryconf",
	11: "hometown",
	12: "hometownconf",
	13: "id",
	14: "id_check",
	15: "id_full",
	16: "id_logic",
	17: "id_logic_message",
	18: "id_type",
	19: "idconf",
	20: "issue_by",
	21: "issue_by_conf",
	22: "issue_date",
	23: "issue_date_conf",
	24: "name",
	25: "nameconf",
	26: "national",
	27: "optinal_data",
	28: "passport_type",
	29: "precinct",
	30: "province",
	31: "religion",
	32: "religionconf",
	33: "result_code",
	34: "server_name",
	35: "server_ver",
	36: "sex",
	37: "sexconf",
}

// Decode decodes OCRResult from json.
func (s *OCRResult) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode OCRResult to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "address":
			if err := func() error {
				s.Address.Reset()
				if err := s.Address.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"address\"")
			}
		case "addressconf":
			if err := func() error {
				s.Addressconf.Reset()
				if err := s.Addressconf.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"addressconf\"")
			}
		case "birthday":
			if err := func() error {
				s.Birthday.Reset()
				if err := s.Birthday.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"birthday\"")
			}
		case "birthdayconf":
			if err := func() error {
				s.Birthdayconf.Reset()
				if err := s.Birthdayconf.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"birthdayconf\"")
			}
		case "class":
			if err := func() error {
				s.Class.Reset()
				if err := s.Class.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"class\"")
			}
		case "country":
			if err := func() error {
				s.Country.Reset()
				if err := s.Country.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"country\"")
			}
		case "district":
			if err := func() error {
				s.District.Reset()
				if err := s.District.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"district\"")
			}
		case "document":
			if err := func() error {
				s.Document.Reset()
				if err := s.Document.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"document\"")
			}
		case "ethnicity":
			if err := func() error {
				s.Ethnicity.Reset()
				if err := s.Ethnicity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ethnicity\"")
			}
		case "expiry":
			if err := func() error {
				s.Expiry.Reset()
				if err := s.Expiry.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"expiry\"")
			}
		case "expiryconf":
			if err := func() error {
				s.Expiryconf.Reset()
				if err := s.Expiryconf.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"expiryconf\"")
			}
		case "hometown":
			if err := func() error {
				s.Hometown.Reset()
				if err := s.Hometown.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"hometown\"")
			}
		case "hometownconf":
			if err := func() error {
				s.Hometownconf.Reset()
				if err := s.Hometownconf.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"hometownconf\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "id_check":
			if err := func() error {
				s.IDCheck.Reset()
				if err := s.IDCheck.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id_check\"")
			}
		case "id_full":
			if err := func() error {
				s.IDFull.Reset()
				if err := s.IDFull.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id_full\"")
			}
		case "id_logic":
			if err := func() error {
				s.IDLogic.Reset()
				if err := s.IDLogic.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id_logic\"")
			}
		case "id_logic_message":
			if err := func() error {
				s.IDLogicMessage.Reset()
				if err := s.IDLogicMessage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id_logic_message\"")
			}
		case "id_type":
			if err := func() error {
				s.IDType.Reset()
				if err := s.IDType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id_type\"")
			}
		case "idconf":
			if err := func() error {
				s.Idconf.Reset()
				if err := s.Idconf.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"idconf\"")
			}
		case "issue_by":
			if err := func() error {
				s.IssueBy.Reset()
				if err := s.IssueBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"issue_by\"")
			}
		case "issue_by_conf":
			if err := func() error {
				s.IssueByConf.Reset()
				if err := s.IssueByConf.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"issue_by_conf\"")
			}
		case "issue_date":
			if err := func() error {
				s.IssueDate.Reset()
				if err := s.IssueDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"issue_date\"")
			}
		case "issue_date_conf":
			if err := func() error {
				s.IssueDateConf.Reset()
				if err := s.IssueDateConf.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"issue_date_conf\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "nameconf":
			if err := func() error {
				s.Nameconf.Reset()
				if err := s.Nameconf.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"nameconf\"")
			}
		case "national":
			if err := func() error {
				s.National.Reset()
				if err := s.National.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"national\"")
			}
		case "optinal_data":
			if err := func() error {
				s.OptinalData.Reset()
				if err := s.OptinalData.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optinal_data\"")
			}
		case "passport_type":
			if err := func() error {
				s.PassportType.Reset()
				if err := s.PassportType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"passport_type\"")
			}
		case "precinct":
			if err := func() error {
				s.Precinct.Reset()
				if err := s.Precinct.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"precinct\"")
			}
		case "province":
			if err := func() error {
				s.Province.Reset()
				if err := s.Province.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"province\"")
			}
		case "religion":
			if err := func() error {
				s.Religion.Reset()
				if err := s.Religion.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"religion\"")
			}
		case "religionconf":
			if err := func() error {
				s.Religionconf.Reset()
				if err := s.Religionconf.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"religionconf\"")
			}
		case "result_code":
			if err := func() error {
				s.ResultCode.Reset()
				if err := s.ResultCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"result_code\"")
			}
		case "server_name":
			if err := func() error {
				s.ServerName.Reset()
				if err := s.ServerName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"server_name\"")
			}
		case "server_ver":
			if err := func() error {
				s.ServerVer.Reset()
				if err := s.ServerVer.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"server_ver\"")
			}
		case "sex":
			if err := func() error {
				s.Sex.Reset()
				if err := s.Sex.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sex\"")
			}
		case "sexconf":
			if err := func() error {
				s.Sexconf.Reset()
				if err := s.Sexconf.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sexconf\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode OCRResult")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OCRResult) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OCRResult) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes OCRResultDocument as json.
func (s OCRResultDocument) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes OCRResultDocument from json.
func (s *OCRResultDocument) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode OCRResultDocument to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch OCRResultDocument(v) {
	case OCRResultDocumentCCCD:
		*s = OCRResultDocumentCCCD
	case OCRResultDocumentNEWID:
		*s = OCRResultDocumentNEWID
	case OCRResultDocumentOLDID:
		*s = OCRResultDocumentOLDID
	case OCRResultDocumentPASSPORT:
		*s = OCRResultDocumentPASSPORT
	case OCRResultDocumentDRIVERLICENSEOLD:
		*s = OCRResultDocumentDRIVERLICENSEOLD
	case OCRResultDocumentDRIVERLICENSEPET:
		*s = OCRResultDocumentDRIVERLICENSEPET
	case OCRResultDocumentCHIPID:
		*s = OCRResultDocumentCHIPID
	case OCRResultDocumentPOLICEID:
		*s = OCRResultDocumentPOLICEID
	case OCRResultDocumentARMYID:
		*s = OCRResultDocumentARMYID
	default:
		*s = OCRResultDocument(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OCRResultDocument) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OCRResultDocument) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes OCRResultIDCheck as json.
func (s OCRResultIDCheck) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes OCRResultIDCheck from json.
func (s *OCRResultIDCheck) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode OCRResultIDCheck to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch OCRResultIDCheck(v) {
	case OCRResultIDCheckBW:
		*s = OCRResultIDCheckBW
	case OCRResultIDCheckCONER:
		*s = OCRResultIDCheckCONER
	case OCRResultIDCheckFAKE:
		*s = OCRResultIDCheckFAKE
	case OCRResultIDCheckPUNCH:
		*s = OCRResultIDCheckPUNCH
	case OCRResultIDCheckREAL:
		*s = OCRResultIDCheckREAL
	default:
		*s = OCRResultIDCheck(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OCRResultIDCheck) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OCRResultIDCheck) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes OCRResultResultCode as json.
func (s OCRResultResultCode) Encode(e *jx.Encoder) {
	e.Int(int(s))
}

// Decode decodes OCRResultResultCode from json.
func (s *OCRResultResultCode) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode OCRResultResultCode to nil")
	}
	v, err := d.Int()
	if err != nil {
		return err
	}
	*s = OCRResultResultCode(v)

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OCRResultResultCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OCRResultResultCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes FaceAntiSpoofStatus as json.
func (o OptFaceAntiSpoofStatus) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes FaceAntiSpoofStatus from json.
func (o *OptFaceAntiSpoofStatus) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptFaceAntiSpoofStatus to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptFaceAntiSpoofStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptFaceAntiSpoofStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes FaceAntiSpoofStatusFakeCode as json.
func (o OptFaceAntiSpoofStatusFakeCode) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes FaceAntiSpoofStatusFakeCode from json.
func (o *OptFaceAntiSpoofStatusFakeCode) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptFaceAntiSpoofStatusFakeCode to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptFaceAntiSpoofStatusFakeCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptFaceAntiSpoofStatusFakeCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes FaceAntiSpoofStatusFakeType as json.
func (o OptFaceAntiSpoofStatusFakeType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes FaceAntiSpoofStatusFakeType from json.
func (o *OptFaceAntiSpoofStatusFakeType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptFaceAntiSpoofStatusFakeType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptFaceAntiSpoofStatusFakeType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptFaceAntiSpoofStatusFakeType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes FaceAntiSpoofStatusStatus as json.
func (o OptFaceAntiSpoofStatusStatus) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes FaceAntiSpoofStatusStatus from json.
func (o *OptFaceAntiSpoofStatusStatus) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptFaceAntiSpoofStatusStatus to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptFaceAntiSpoofStatusStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptFaceAntiSpoofStatusStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes float64 as json.
func (o OptFloat64) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Float64(float64(o.Value))
}

// Decode decodes float64 from json.
func (o *OptFloat64) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptFloat64 to nil")
	}
	o.Set = true
	v, err := d.Float64()
	if err != nil {
		return err
	}
	o.Value = float64(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptFloat64) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptFloat64) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes int as json.
func (o OptInt) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Int(int(o.Value))
}

// Decode decodes int from json.
func (o *OptInt) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptInt to nil")
	}
	o.Set = true
	v, err := d.Int()
	if err != nil {
		return err
	}
	o.Value = int(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptInt) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptInt) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes OCRResultDocument as json.
func (o OptOCRResultDocument) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes OCRResultDocument from json.
func (o *OptOCRResultDocument) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptOCRResultDocument to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptOCRResultDocument) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptOCRResultDocument) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes OCRResultIDCheck as json.
func (o OptOCRResultIDCheck) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes OCRResultIDCheck from json.
func (o *OptOCRResultIDCheck) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptOCRResultIDCheck to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptOCRResultIDCheck) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptOCRResultIDCheck) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes OCRResultResultCode as json.
func (o OptOCRResultResultCode) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Int(int(o.Value))
}

// Decode decodes OCRResultResultCode from json.
func (o *OptOCRResultResultCode) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptOCRResultResultCode to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptOCRResultResultCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptOCRResultResultCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes string as json.
func (o OptString) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes string from json.
func (o *OptString) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptString to nil")
	}
	o.Set = true
	v, err := d.Str()
	if err != nil {
		return err
	}
	o.Value = string(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptString) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptString) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes VerificationResultVerifyResult as json.
func (o OptVerificationResultVerifyResult) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Int(int(o.Value))
}

// Decode decodes VerificationResultVerifyResult from json.
func (o *OptVerificationResultVerifyResult) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptVerificationResultVerifyResult to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptVerificationResultVerifyResult) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptVerificationResultVerifyResult) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes VerificationResultWearingMask as json.
func (o OptVerificationResultWearingMask) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes VerificationResultWearingMask from json.
func (o *OptVerificationResultWearingMask) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptVerificationResultWearingMask to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptVerificationResultWearingMask) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptVerificationResultWearingMask) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s VerificationInput) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s VerificationInput) encodeFields(e *jx.Encoder) {
	{
		if s.Check3RandomPose.Set {
			e.FieldStart("check_3_random_pose")
			s.Check3RandomPose.Encode(e)
		}
	}
	{
		if s.Check3StraightPose.Set {
			e.FieldStart("check_3_straight_pose")
			s.Check3StraightPose.Encode(e)
		}
	}
	{
		if s.FakeThreshold.Set {
			e.FieldStart("fake_threshold")
			s.FakeThreshold.Encode(e)
		}
	}
	{

		e.FieldStart("image_card")
		e.Str(s.ImageCard)
	}
	{

		e.FieldStart("image_live")
		e.Str(s.ImageLive)
	}
	{
		if s.ImageLive1.Set {
			e.FieldStart("image_live1")
			s.ImageLive1.Encode(e)
		}
	}
	{
		if s.ImageLive2.Set {
			e.FieldStart("image_live2")
			s.ImageLive2.Encode(e)
		}
	}
	{
		if s.ImageLive3.Set {
			e.FieldStart("image_live3")
			s.ImageLive3.Encode(e)
		}
	}
	{
		if s.MaskThreshold.Set {
			e.FieldStart("mask_threshold")
			s.MaskThreshold.Encode(e)
		}
	}
	{

		e.FieldStart("request_id")
		e.Str(s.RequestID)
	}
	{
		if s.ReturnFeature.Set {
			e.FieldStart("return_feature")
			s.ReturnFeature.Encode(e)
		}
	}
	{
		if s.SimThresholdLevel1.Set {
			e.FieldStart("sim_threshold_level1")
			s.SimThresholdLevel1.Encode(e)
		}
	}
	{
		if s.SimThresholdLevel2.Set {
			e.FieldStart("sim_threshold_level2")
			s.SimThresholdLevel2.Encode(e)
		}
	}
}

var jsonFieldsNameOfVerificationInput = [13]string{
	0:  "check_3_random_pose",
	1:  "check_3_straight_pose",
	2:  "fake_threshold",
	3:  "image_card",
	4:  "image_live",
	5:  "image_live1",
	6:  "image_live2",
	7:  "image_live3",
	8:  "mask_threshold",
	9:  "request_id",
	10: "return_feature",
	11: "sim_threshold_level1",
	12: "sim_threshold_level2",
}

// Decode decodes VerificationInput from json.
func (s *VerificationInput) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode VerificationInput to nil")
	}
	var requiredBitSet [2]uint8
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "check_3_random_pose":
			if err := func() error {
				s.Check3RandomPose.Reset()
				if err := s.Check3RandomPose.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"check_3_random_pose\"")
			}
		case "check_3_straight_pose":
			if err := func() error {
				s.Check3StraightPose.Reset()
				if err := s.Check3StraightPose.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"check_3_straight_pose\"")
			}
		case "fake_threshold":
			if err := func() error {
				s.FakeThreshold.Reset()
				if err := s.FakeThreshold.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"fake_threshold\"")
			}
		case "image_card":
			requiredBitSet[0] |= 1 << 3
			if err := func() error {
				v, err := d.Str()
				s.ImageCard = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"image_card\"")
			}
		case "image_live":
			requiredBitSet[0] |= 1 << 4
			if err := func() error {
				v, err := d.Str()
				s.ImageLive = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"image_live\"")
			}
		case "image_live1":
			if err := func() error {
				s.ImageLive1.Reset()
				if err := s.ImageLive1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"image_live1\"")
			}
		case "image_live2":
			if err := func() error {
				s.ImageLive2.Reset()
				if err := s.ImageLive2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"image_live2\"")
			}
		case "image_live3":
			if err := func() error {
				s.ImageLive3.Reset()
				if err := s.ImageLive3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"image_live3\"")
			}
		case "mask_threshold":
			if err := func() error {
				s.MaskThreshold.Reset()
				if err := s.MaskThreshold.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"mask_threshold\"")
			}
		case "request_id":
			requiredBitSet[1] |= 1 << 1
			if err := func() error {
				v, err := d.Str()
				s.RequestID = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"request_id\"")
			}
		case "return_feature":
			if err := func() error {
				s.ReturnFeature.Reset()
				if err := s.ReturnFeature.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"return_feature\"")
			}
		case "sim_threshold_level1":
			if err := func() error {
				s.SimThresholdLevel1.Reset()
				if err := s.SimThresholdLevel1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sim_threshold_level1\"")
			}
		case "sim_threshold_level2":
			if err := func() error {
				s.SimThresholdLevel2.Reset()
				if err := s.SimThresholdLevel2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sim_threshold_level2\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode VerificationInput")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [2]uint8{
		0b00011000,
		0b00000010,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfVerificationInput) {
					name = jsonFieldsNameOfVerificationInput[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s VerificationInput) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *VerificationInput) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s VerificationMessage) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s VerificationMessage) encodeFields(e *jx.Encoder) {
	{
		if s.APIVersion.Set {
			e.FieldStart("api_version")
			s.APIVersion.Encode(e)
		}
	}
	{

		e.FieldStart("error_code")
		e.Str(s.ErrorCode)
	}
	{

		e.FieldStart("error_message")
		e.Str(s.ErrorMessage)
	}
}

var jsonFieldsNameOfVerificationMessage = [3]string{
	0: "api_version",
	1: "error_code",
	2: "error_message",
}

// Decode decodes VerificationMessage from json.
func (s *VerificationMessage) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode VerificationMessage to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "api_version":
			if err := func() error {
				s.APIVersion.Reset()
				if err := s.APIVersion.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"api_version\"")
			}
		case "error_code":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Str()
				s.ErrorCode = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error_code\"")
			}
		case "error_message":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				v, err := d.Str()
				s.ErrorMessage = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error_message\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode VerificationMessage")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000110,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfVerificationMessage) {
					name = jsonFieldsNameOfVerificationMessage[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s VerificationMessage) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *VerificationMessage) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s VerificationResult) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s VerificationResult) encodeFields(e *jx.Encoder) {
	{
		if s.FaceAntiSpoofStatus.Set {
			e.FieldStart("face_anti_spoof_status")
			s.FaceAntiSpoofStatus.Encode(e)
		}
	}
	{
		if s.FaceCardAngle.Set {
			e.FieldStart("face_card_angle")
			s.FaceCardAngle.Encode(e)
		}
	}
	{
		if s.FaceLiveAngle.Set {
			e.FieldStart("face_live_angle")
			s.FaceLiveAngle.Encode(e)
		}
	}
	{
		if s.FaceLocCard != nil {
			e.FieldStart("face_loc_card")
			e.ArrStart()
			for _, elem := range s.FaceLocCard {
				e.Int(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.FaceLocLive != nil {
			e.FieldStart("face_loc_live")
			e.ArrStart()
			for _, elem := range s.FaceLocLive {
				e.Int(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.FeatureVectorFaceCard != nil {
			e.FieldStart("feature_vector_face_card")
			e.ArrStart()
			for _, elem := range s.FeatureVectorFaceCard {
				e.Float64(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.FeatureVectorFaceLive != nil {
			e.FieldStart("feature_vector_face_live")
			e.ArrStart()
			for _, elem := range s.FeatureVectorFaceLive {
				e.Float64(elem)
			}
			e.ArrEnd()
		}
	}
	{

		e.FieldStart("message")
		s.Message.Encode(e)
	}
	{

		e.FieldStart("request_id")
		e.Str(s.RequestID)
	}
	{
		if s.Sim.Set {
			e.FieldStart("sim")
			s.Sim.Encode(e)
		}
	}
	{
		if s.VerificationTime.Set {
			e.FieldStart("verification_time")
			s.VerificationTime.Encode(e)
		}
	}
	{
		if s.VerifyResult.Set {
			e.FieldStart("verify_result")
			s.VerifyResult.Encode(e)
		}
	}
	{
		if s.VerifyResultText.Set {
			e.FieldStart("verify_result_text")
			s.VerifyResultText.Encode(e)
		}
	}
	{
		if s.WearingMask.Set {
			e.FieldStart("wearing_mask")
			s.WearingMask.Encode(e)
		}
	}
	{
		if s.WearingMaskScore.Set {
			e.FieldStart("wearing_mask_score")
			s.WearingMaskScore.Encode(e)
		}
	}
}

var jsonFieldsNameOfVerificationResult = [15]string{
	0:  "face_anti_spoof_status",
	1:  "face_card_angle",
	2:  "face_live_angle",
	3:  "face_loc_card",
	4:  "face_loc_live",
	5:  "feature_vector_face_card",
	6:  "feature_vector_face_live",
	7:  "message",
	8:  "request_id",
	9:  "sim",
	10: "verification_time",
	11: "verify_result",
	12: "verify_result_text",
	13: "wearing_mask",
	14: "wearing_mask_score",
}

// Decode decodes VerificationResult from json.
func (s *VerificationResult) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode VerificationResult to nil")
	}
	var requiredBitSet [2]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "face_anti_spoof_status":
			if err := func() error {
				s.FaceAntiSpoofStatus.Reset()
				if err := s.FaceAntiSpoofStatus.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"face_anti_spoof_status\"")
			}
		case "face_card_angle":
			if err := func() error {
				s.FaceCardAngle.Reset()
				if err := s.FaceCardAngle.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"face_card_angle\"")
			}
		case "face_live_angle":
			if err := func() error {
				s.FaceLiveAngle.Reset()
				if err := s.FaceLiveAngle.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"face_live_angle\"")
			}
		case "face_loc_card":
			if err := func() error {
				s.FaceLocCard = make([]int, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int
					v, err := d.Int()
					elem = int(v)
					if err != nil {
						return err
					}
					s.FaceLocCard = append(s.FaceLocCard, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"face_loc_card\"")
			}
		case "face_loc_live":
			if err := func() error {
				s.FaceLocLive = make([]int, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int
					v, err := d.Int()
					elem = int(v)
					if err != nil {
						return err
					}
					s.FaceLocLive = append(s.FaceLocLive, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"face_loc_live\"")
			}
		case "feature_vector_face_card":
			if err := func() error {
				s.FeatureVectorFaceCard = make([]float64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem float64
					v, err := d.Float64()
					elem = float64(v)
					if err != nil {
						return err
					}
					s.FeatureVectorFaceCard = append(s.FeatureVectorFaceCard, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"feature_vector_face_card\"")
			}
		case "feature_vector_face_live":
			if err := func() error {
				s.FeatureVectorFaceLive = make([]float64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem float64
					v, err := d.Float64()
					elem = float64(v)
					if err != nil {
						return err
					}
					s.FeatureVectorFaceLive = append(s.FeatureVectorFaceLive, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"feature_vector_face_live\"")
			}
		case "message":
			requiredBitSet[0] |= 1 << 7
			if err := func() error {
				if err := s.Message.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"message\"")
			}
		case "request_id":
			requiredBitSet[1] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.RequestID = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"request_id\"")
			}
		case "sim":
			if err := func() error {
				s.Sim.Reset()
				if err := s.Sim.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sim\"")
			}
		case "verification_time":
			if err := func() error {
				s.VerificationTime.Reset()
				if err := s.VerificationTime.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"verification_time\"")
			}
		case "verify_result":
			if err := func() error {
				s.VerifyResult.Reset()
				if err := s.VerifyResult.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"verify_result\"")
			}
		case "verify_result_text":
			if err := func() error {
				s.VerifyResultText.Reset()
				if err := s.VerifyResultText.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"verify_result_text\"")
			}
		case "wearing_mask":
			if err := func() error {
				s.WearingMask.Reset()
				if err := s.WearingMask.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"wearing_mask\"")
			}
		case "wearing_mask_score":
			if err := func() error {
				s.WearingMaskScore.Reset()
				if err := s.WearingMaskScore.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"wearing_mask_score\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode VerificationResult")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [2]uint8{
		0b10000000,
		0b00000001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfVerificationResult) {
					name = jsonFieldsNameOfVerificationResult[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s VerificationResult) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *VerificationResult) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes VerificationResultVerifyResult as json.
func (s VerificationResultVerifyResult) Encode(e *jx.Encoder) {
	e.Int(int(s))
}

// Decode decodes VerificationResultVerifyResult from json.
func (s *VerificationResultVerifyResult) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode VerificationResultVerifyResult to nil")
	}
	v, err := d.Int()
	if err != nil {
		return err
	}
	*s = VerificationResultVerifyResult(v)

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s VerificationResultVerifyResult) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *VerificationResultVerifyResult) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes VerificationResultWearingMask as json.
func (s VerificationResultWearingMask) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes VerificationResultWearingMask from json.
func (s *VerificationResultWearingMask) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode VerificationResultWearingMask to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch VerificationResultWearingMask(v) {
	case VerificationResultWearingMaskYES:
		*s = VerificationResultWearingMaskYES
	case VerificationResultWearingMaskNO:
		*s = VerificationResultWearingMaskNO
	default:
		*s = VerificationResultWearingMask(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s VerificationResultWearingMask) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *VerificationResultWearingMask) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}
