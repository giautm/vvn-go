// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
	"net/url"
	"time"

	"github.com/go-faster/errors"
	"go.opentelemetry.io/otel/attribute"
	"go.opentelemetry.io/otel/codes"
	"go.opentelemetry.io/otel/trace"

	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/otelogen"
	"github.com/ogen-go/ogen/uri"
)

// Client implements OAS client.
type Client struct {
	serverURL *url.URL
	sec       SecuritySource
	baseClient
}

// NewClient initializes new Client defined by OAS.
func NewClient(serverURL string, sec SecuritySource, opts ...Option) (*Client, error) {
	u, err := url.Parse(serverURL)
	if err != nil {
		return nil, err
	}
	c, err := newConfig(opts...).baseClient()
	if err != nil {
		return nil, err
	}
	return &Client{
		serverURL:  u,
		sec:        sec,
		baseClient: c,
	}, nil
}

type serverURLKey struct{}

// WithServerURL sets context key to override server URL.
func WithServerURL(ctx context.Context, u *url.URL) context.Context {
	return context.WithValue(ctx, serverURLKey{}, u)
}

func (c *Client) requestURL(ctx context.Context) *url.URL {
	u, ok := ctx.Value(serverURLKey{}).(*url.URL)
	if !ok {
		return c.serverURL
	}
	return u
}

// FaceRecognition invokes faceRecognition operation.
//
// A facial recognition system is a technology capable of identifying or verifying a person from a
// digital image or a video frame from a video source.
//
// POST /v3.2/faceid/recognition
func (c *Client) FaceRecognition(ctx context.Context, request FaceRecognitionReq) (res FaceRecognitionRes, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("faceRecognition"),
	}
	// Validate request before sending.
	switch request := request.(type) {
	case *FaceIDRecognitionInput:
		// Validation is not required for this type.
	case *FaceIDRecognitionInputForm:
		// Validation is not required for this type.
	default:
		return res, errors.Errorf("unexpected request type: %T", request)
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, otelAttrs...)

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "FaceRecognition",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, otelAttrs...)
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	u.Path += "/v3.2/faceid/recognition"

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u, nil)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeFaceRecognitionRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "Security:APIKey"
	if err := c.securityAPIKey(ctx, "FaceRecognition", r); err != nil {
		return res, errors.Wrap(err, "security \"APIKey\"")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeFaceRecognitionResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// FaceRegister invokes faceRegister operation.
//
// Register image of consumer into database. System can not registerer if image is exist.
//
// POST /v3.2/faceid/register
func (c *Client) FaceRegister(ctx context.Context, request FaceRegisterReq) (res FaceRegisterRes, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("faceRegister"),
	}
	// Validate request before sending.
	switch request := request.(type) {
	case *FaceIDRegisterInput:
		// Validation is not required for this type.
	case *FaceIDRegisterInputForm:
		// Validation is not required for this type.
	default:
		return res, errors.Errorf("unexpected request type: %T", request)
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, otelAttrs...)

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "FaceRegister",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, otelAttrs...)
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	u.Path += "/v3.2/faceid/register"

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u, nil)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeFaceRegisterRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "Security:APIKey"
	if err := c.securityAPIKey(ctx, "FaceRegister", r); err != nil {
		return res, errors.Wrap(err, "security \"APIKey\"")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeFaceRegisterResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// FaceUnregister invokes faceUnregister operation.
//
// Delete information image of consumer registered database.
//
// POST /v3.2/faceid/delete
func (c *Client) FaceUnregister(ctx context.Context, request FaceUnregisterReq) (res FaceUnregisterRes, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("faceUnregister"),
	}
	// Validate request before sending.

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, otelAttrs...)

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "FaceUnregister",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, otelAttrs...)
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	u.Path += "/v3.2/faceid/delete"

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u, nil)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeFaceUnregisterRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "Security:APIKey"
	if err := c.securityAPIKey(ctx, "FaceUnregister", r); err != nil {
		return res, errors.Wrap(err, "security \"APIKey\"")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeFaceUnregisterResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// FaceVerification invokes faceVerification operation.
//
// Face verification is the task of comparing a candidate face to another, and verifying whether it
// is a match. It is a one-to-one mapping: you have to check if this person is the correct one.
//
// POST /v3.2/faceid/verification
func (c *Client) FaceVerification(ctx context.Context, request FaceVerificationReq) (res FaceVerificationRes, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("faceVerification"),
	}
	// Validate request before sending.
	switch request := request.(type) {
	case *FaceIDVerificationInput:
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return res, errors.Wrap(err, "validate")
		}
	case *FaceIDVerificationInputForm:
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return res, errors.Wrap(err, "validate")
		}
	default:
		return res, errors.Errorf("unexpected request type: %T", request)
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, otelAttrs...)

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "FaceVerification",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, otelAttrs...)
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	u.Path += "/v3.2/faceid/verification"

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u, nil)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeFaceVerificationRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "Security:APIKey"
	if err := c.securityAPIKey(ctx, "FaceVerification", r); err != nil {
		return res, errors.Wrap(err, "security \"APIKey\"")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeFaceVerificationResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// OCRecognition invokes OCRecognition operation.
//
// Cung cấp phương thức để trích xuất thông tin trên các văn bản tài liệu như:
// Giấy phép lái xe (GPLX), Passport, CMND, Căn cước công dân (CCCD) ...
//
// POST /v3.2/ocr/recognition
func (c *Client) OCRecognition(ctx context.Context, request OCRInputForm) (res OCRecognitionRes, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("OCRecognition"),
	}
	// Validate request before sending.
	if err := func() error {
		if err := request.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, otelAttrs...)

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "OCRecognition",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, otelAttrs...)
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	u.Path += "/v3.2/ocr/recognition"

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u, nil)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeOCRecognitionRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "Security:APIKey"
	if err := c.securityAPIKey(ctx, "OCRecognition", r); err != nil {
		return res, errors.Wrap(err, "security \"APIKey\"")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeOCRecognitionResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}
