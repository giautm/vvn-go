// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"

	"go.opentelemetry.io/otel/metric/instrument/syncint64"

	"github.com/ogen-go/ogen/otelogen"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// NewFaceIDVerification implements newFaceIDVerification operation.
	//
	// Face verification is the task of comparing a candidate face to another, and verifying whether it
	// is a match. It is a one-to-one mapping: you have to check if this person is the correct one.
	//
	// POST /v3.2/faceid/verification
	NewFaceIDVerification(ctx context.Context, req NewFaceIDVerificationReq) (NewFaceIDVerificationRes, error)
	// NewOCRRecognition implements newOCRRecognition operation.
	//
	// Cung cấp phương thức để trích xuất thông tin trên các văn bản tài liệu như:
	// Giấy phép lái xe (GPLX), Passport, CMND, Căn cước công dân (CCCD) ...
	//
	// POST /v3.2/ocr/recognition
	NewOCRRecognition(ctx context.Context, req OCRInputForm) (NewOCRRecognitionRes, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h   Handler
	sec SecurityHandler
	cfg config

	requests syncint64.Counter
	errors   syncint64.Counter
	duration syncint64.Histogram
}

func NewServer(h Handler, sec SecurityHandler, opts ...Option) (*Server, error) {
	s := &Server{
		h:   h,
		sec: sec,
		cfg: newConfig(opts...),
	}
	var err error
	if s.requests, err = s.cfg.Meter.SyncInt64().Counter(otelogen.ServerRequestCount); err != nil {
		return nil, err
	}
	if s.errors, err = s.cfg.Meter.SyncInt64().Counter(otelogen.ServerErrorsCount); err != nil {
		return nil, err
	}
	if s.duration, err = s.cfg.Meter.SyncInt64().Histogram(otelogen.ServerDuration); err != nil {
		return nil, err
	}
	return s, nil
}
