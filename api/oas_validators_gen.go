// Code generated by ogen, DO NOT EDIT.

package api

import (
	"fmt"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/validate"
)

func (s FaceAntiSpoofStatus) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.FakeCode.Set {
			if err := func() error {
				if err := s.FakeCode.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "fake_code",
			Error: err,
		})
	}
	if err := func() error {
		if s.FakeScore.Set {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(s.FakeScore.Value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "fake_score",
			Error: err,
		})
	}
	if err := func() error {
		if s.FakeType.Set {
			if err := func() error {
				if err := s.FakeType.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "fake_type",
			Error: err,
		})
	}
	if err := func() error {
		if s.Status.Set {
			if err := func() error {
				if err := s.Status.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s FaceAntiSpoofStatusFakeCode) Validate() error {
	switch s {
	case "FAKE":
		return nil
	case "REAL":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s FaceAntiSpoofStatusFakeType) Validate() error {
	switch s {
	case "N/A":
		return nil
	case "SCREEN":
		return nil
	case "RANDOM_POSE":
		return nil
	case "STRAIGHT_POSE":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s FaceAntiSpoofStatusStatus) Validate() error {
	switch s {
	case "FAKE":
		return nil
	case "REAL":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s OCRInput) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.IDFullThr.Set {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(s.IDFullThr.Value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id_full_thr",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s OCRInputForm) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.IDFullThr.Set {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(s.IDFullThr.Value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id_full_thr",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s OCRResult) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Document.Set {
			if err := func() error {
				if err := s.Document.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "document",
			Error: err,
		})
	}
	if err := func() error {
		if s.IDCheck.Set {
			if err := func() error {
				if err := s.IDCheck.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id_check",
			Error: err,
		})
	}
	if err := func() error {
		if s.ResultCode.Set {
			if err := func() error {
				if err := s.ResultCode.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "result_code",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s OCRResultDocument) Validate() error {
	switch s {
	case "CCCD":
		return nil
	case "NEW ID":
		return nil
	case "OLD ID":
		return nil
	case "PASSPORT":
		return nil
	case "DRIVER LICENSE OLD":
		return nil
	case "DRIVER LICENSE PET":
		return nil
	case "CHIP ID":
		return nil
	case "POLICE ID":
		return nil
	case "ARMY ID":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s OCRResultIDCheck) Validate() error {
	switch s {
	case "BW":
		return nil
	case "CONER":
		return nil
	case "FAKE":
		return nil
	case "PUNCH":
		return nil
	case "REAL":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s OCRResultResultCode) Validate() error {
	switch s {
	case 200:
		return nil
	case 500:
		return nil
	case 501:
		return nil
	case 401:
		return nil
	case 402:
		return nil
	case 201:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s VerificationInput) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.FakeThreshold.Set {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(s.FakeThreshold.Value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "fake_threshold",
			Error: err,
		})
	}
	if err := func() error {
		if s.MaskThreshold.Set {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(s.MaskThreshold.Value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "mask_threshold",
			Error: err,
		})
	}
	if err := func() error {
		if s.SimThresholdLevel1.Set {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(s.SimThresholdLevel1.Value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "sim_threshold_level1",
			Error: err,
		})
	}
	if err := func() error {
		if s.SimThresholdLevel2.Set {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(s.SimThresholdLevel2.Value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "sim_threshold_level2",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s VerificationResult) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.FaceAntiSpoofStatus.Set {
			if err := func() error {
				if err := s.FaceAntiSpoofStatus.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "face_anti_spoof_status",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.FeatureVectorFaceCard {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(elem)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "feature_vector_face_card",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.FeatureVectorFaceLive {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(elem)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "feature_vector_face_live",
			Error: err,
		})
	}
	if err := func() error {
		if s.Sim.Set {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(s.Sim.Value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "sim",
			Error: err,
		})
	}
	if err := func() error {
		if s.VerifyResult.Set {
			if err := func() error {
				if err := s.VerifyResult.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "verify_result",
			Error: err,
		})
	}
	if err := func() error {
		if s.WearingMask.Set {
			if err := func() error {
				if err := s.WearingMask.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "wearing_mask",
			Error: err,
		})
	}
	if err := func() error {
		if s.WearingMaskScore.Set {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(s.WearingMaskScore.Value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "wearing_mask_score",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s VerificationResultVerifyResult) Validate() error {
	switch s {
	case 0:
		return nil
	case 1:
		return nil
	case 2:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s VerificationResultWearingMask) Validate() error {
	switch s {
	case "YES":
		return nil
	case "NO":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
